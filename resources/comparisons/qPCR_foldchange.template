library(pROC)
library(plyr)
library(ggplot2)
library(CHBUtils)
library(biomaRt)
qpcr_file = {{{qpcr-file}}}
FC_file = {{{out-file}}}
project = {{{project}}}
foldchange = read.table(qpcr_file, header=TRUE, sep="\t")
in_files = {{{in-files}}}
ldf = lapply(in_files, read.table, header=TRUE, stringsAsFactors=FALSE)
df = do.call(rbind, ldf)
human = useMart(biomart = "ENSEMBL_MART_ENSEMBL",
                dataset="hsapiens_gene_ensembl",
                host = "jul2015.archive.ensembl.org")
conversions = getBM(attributes=c("ensembl_gene_id", "hgnc_symbol"), mart=human)
df = merge(df, conversions, by.x="id", by.y="ensembl_gene_id")
df$id = df$hgnc_symbol
df = df[df$id %in% foldchange$id,]
ROC_file = paste(dirname(FC_file), "roc-plot.pdf", sep="/")
pval_AUC_file = paste(dirname(FC_file), "pvalue-auc-plot.pdf", sep="/")
logFC_AUC_file = paste(dirname(FC_file), "logFC-auc-plot.pdf", sep="/")
out_dir = dirname(FC_file)

plot_FC = function(df) {
    df = df[, c("id", "logFC", "algorithm")]
    colnames(df) = c("id", "logFC", "method")
    qpcr_foldchange = foldchange[, c("id", "logFC")]
    df = merge(df, qpcr_foldchange, by="id")
    colnames(df) = c("id", "seq_logFC", "method", "qPCR_logFC")
    p = ggplot(df, aes(seq_logFC, qPCR_logFC)) + geom_point() + facet_grid(. ~ method) +
        xlab(expression(paste(log["2"],  " fold change via RNA-seq"))) +
            ylab(expression(paste(log["2"], " fold change via qPCR")))
    ggsave(filename=FC_file, plot=p)
}

plot_ROC = function(df) {
    df = df[, c("id", "padj", "algorithm")]
    colnames = c("id", "padj", "method")
    qpcr_foldchange = foldchange[, c("id", "padj")]
    df = merge(df, qpcr_foldchange, by="id")
    colnames(df) = c("id", "padj", "method", "qPCR_padj")
    df$pred = 1 - df$pad
    df$qPCR_DE = as.numeric(df$qPCR_padj < 0.05)
    p = ggROC(df, "method", "qPCR_DE", "pred")
    ggsave(filename=ROC_file, plot=p)
}

plot_pvalue_AUC = function(df) {
    cutoffs = seq(0.01, 0.20, 0.01)
    df = df[, c("id", "padj", "algorithm")]
    colnames = c("id", "padj", "method")
    qpcr_foldchange = foldchange[, c("id", "padj")]
    colnames(qpcr_foldchange) = c("id", "qPCR_padj")
    df = merge(df, qpcr_foldchange, by="id")
    colnames(df) = c("id", "padj", "method", "qPCR_padj")
    df$qPCR_DE = as.numeric(df$qPCR_padj < 0.05)
    complete = df[complete.cases(df),]
    plotdata = c()
    for (cutoff in cutoffs) {
        complete$qPCR_DE = as.numeric(complete$qPCR_padj < cutoff)
        out = ddply(complete, "method",
            function(x) data.frame(roc(x[,"qPCR_DE"], x[,"padj"])[c("auc")]))
        out$cutoff = cutoff
        plotdata = rbind(plotdata, out)
    }
    p = ggplot(plotdata, aes(cutoff, auc)) + geom_line(aes(colour=method)) +
        xlab("p-value cutoff for qPCR data")
    ggsave(filename=pval_AUC_file, plot=p)
    return(p)
}
plot_logFC_AUC = function(df) {
    cutoffs = seq(0.5, 2, 0.1)
    df = df[, c("id", "padj", "algorithm")]
    qpcr_foldchange = foldchange[, c("id", "logFC")]
    colnames(qpcr_foldchange) = c("id", "qPCR_logFC")
    df = merge(df, qpcr_foldchange, by="id")
    colnames(df) = c("id", "padj", "method", "qPCR_logFC")
    complete = df[complete.cases(df),]
    plotdata = c()
    for (cutoff in cutoffs) {
        complete$qPCR_DE = as.numeric(abs(complete$qPCR_logFC) > cutoff)
        out = ddply(complete, "method",
            function(x) data.frame(roc(x[,"qPCR_DE"], x[,"padj"])[c("auc")]))
        out$cutoff = cutoff
        plotdata = rbind(plotdata, out)
    }
    p = ggplot(plotdata, aes(cutoff, auc)) + geom_line(aes(colour=method)) +
        xlab("foldChange cutoff for qPCR data")
    ggsave(filename=logFC_AUC_file, plot=p)
    return(p)
}

jaccard = function(df, column, cutoff=0.05) {
    true_set = subset(foldchange, padj < 0.05)$id
    algorithms = unique(df$algorithm)
    sig = list()
    for(alg in algorithms) {
        sig[alg] = list(subset(df, algorithm == alg & df[,column] < cutoff)$id)
    }
    algorithm = c()
    ji = c()
    for(alg in algorithms) {
        comparison = paste(alg, "_vs_qPCR")
        algorithm = c(algorithm, alg)
        alg_intersection = intersect(sig[alg][[1]], true_set)
        alg_union = union(sig[alg][[1]], true_set)
        ji = c(ji, length(alg_intersection) / length(alg_union))
    }
    return(data.frame(algorithm=algorithm, jaccard=ji, project=project))
}

concordance = function(df) {
    algorithms = unique(df$algorithm)
    true_set = subset(foldchange, padj < 0.05)$id
    concordant = list()
    algorithm = list()
    false_positive = list()
    false_negative = list()
    for(alg in algorithms) {
        sig = subset(df, algorithm == alg & df[, "padj"] < 0.05)$id
        concordant = c(concordant, length(intersect(sig, true_set)))
        false_positive = c(false_positive, length(setdiff(sig, true_set)))
        false_negative = c(false_negative, length(setdiff(true_set, sig)))
        algorithm = c(algorithm, alg)
    }
    return(data.frame(concordant=unlist(concordant), false_positive=unlist(false_positive),
                      false_negative=unlist(false_negative), algorithm=unlist(algorithm),
                      project=project))
}

plot_FC(df)
plot_ROC(df)
plot_pvalue_AUC(df)
plot_logFC_AUC(df)


ji = jaccard(df, "padj")
write.table(ji, file.path(out_dir, "seqc_jaccard.tsv"), quote=FALSE, row.names=FALSE, sep="\t")

concord = concordance(df)
write.table(concord, file.path(out_dir, "seqc_concord.tsv"), quote=FALSE, row.names=FALSE, sep="\t")

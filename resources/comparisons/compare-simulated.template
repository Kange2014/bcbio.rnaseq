library(pROC)
library(plyr)
library(ggplot2)
library(CHBUtils)
library(reshape)
score_file = {{{score-file}}}
FC_file = {{{out-file}}}
project = {{{project}}}
scores = read.table(score_file, header=TRUE, sep="\t")
in_files = {{{in-files}}}
ldf = lapply(in_files, read.table, header=TRUE, stringsAsFactors=FALSE)
df = do.call(rbind, ldf)
ROC_file = paste(dirname(FC_file), "roc-plot.pdf", sep="/")
pval_AUC_file = paste(dirname(FC_file), "pvalue-auc-plot.pdf", sep="/")
logFC_AUC_file = paste(dirname(FC_file), "logFC-auc-plot.pdf", sep="/")
concord_plot = paste(dirname(FC_file), "concordant.pdf", sep="/")
jaccard_plot = paste(dirname(FC_file), "jaccard.pdf", sep="/")
out_dir = dirname(FC_file)

cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
               "#0072B2", "#D55E00", "#CC79A7")


plot_ROC = function(df, scores) {
    df_new = df[, c("id", "padj", "algorithm")]
    colnames = c("id", "padj", "method")
    df_new = merge(df_new, scores, by="id")
    colnames(df_new) = c("id", "padj", "method", "correct")
    df_new$pred = 1 - df_new$padj
    df_new$qPCR_DE = df_new$correct != 1
    p = ggROC(df_new, "method", "qPCR_DE", "pred")
    ggsave(filename=ROC_file, plot=p)
}

plot_logFC_AUC = function(df, scores) {
    cutoffs = sort(unique(abs(scores$correct)))
    cutoffs = cutoffs[cutoffs != 0]
    df_new = df[, c("id", "padj", "algorithm")]
    df_new = merge(df_new, scores, by="id")
    colnames(df_new) = c("id", "padj", "method", "correct")
    complete = df_new[complete.cases(df_new),]
    plotdata = c()
    for (cutoff in cutoffs) {
        submatrix = subset(complete, abs(correct) >=cutoff | correct == 0)
        submatrix$DE = abs(submatrix$correct) >= cutoff
        out = ddply(submatrix, "method",
            function(x) data.frame(roc(x[,"DE"], x[,"padj"])[c("auc")]))
        out$cutoff = cutoff
        plotdata = rbind(plotdata, out)
    }
    p = ggplot(plotdata, aes(cutoff, auc)) + geom_line(aes(colour=method)) +
        xlab("foldChange cutoff for qPCR data")
    ggsave(filename=logFC_AUC_file, plot=p)
    return(p)
}

jaccard = function(df, column, scores, cutoff=0.05) {
    true_set = subset(scores, correct != 0)$id
    algorithms = unique(df$algorithm)
    sig = list()
    for(alg in algorithms) {
        sig[alg] = list(subset(df, algorithm == alg & df[,column] < cutoff)$id)
    }
    algorithm = c()
    ji = c()
    for(alg in algorithms) {
        comparison = paste(alg, "_vs_simulated")
        algorithm = c(algorithm, alg)
        alg_intersection = intersect(sig[alg][[1]], true_set)
        alg_union = union(sig[alg][[1]], true_set)
        ji = c(ji, length(alg_intersection) / length(alg_union))
    }
    return(data.frame(algorithm=algorithm, jaccard=ji, project=project))
}

concordance = function(df, scores) {
    df_new = df[, c("id", "padj", "algorithm")]
    colnames = c("id", "padj", "method")
    df_new = merge(df_new, scores, by="id")
    colnames(df_new) = c("id", "padj", "method", "correct")
    
    cutoffs_to_check = sort(unique(abs(scores$correct)))
    cutoffs_to_check = cutoffs_to_check[cutoffs_to_check != 0]
    algorithms = unique(df_new$method)
    concordant = list()
    algorithm = list()
    false_positive = list()
    false_negative = list()
    cutoffs = list()
    
    for(alg in algorithms) {
        for(cutoff in cutoffs_to_check) {
            submatrix = subset(df_new, abs(correct) >= cutoff | correct == 0)
            true_set = subset(df_new, abs(correct) >= cutoff)$id
            submatrix$DE = abs(submatrix$correct) >= cutoff
            sig = subset(submatrix, method == alg & padj < 0.05)$id
            concordant = c(concordant, length(intersect(sig, true_set)))
            false_positive = c(false_positive, length(setdiff(sig, true_set)))
            false_negative = c(false_negative, length(setdiff(true_set, sig)))
            algorithm = c(algorithm, alg)
            cutoffs = c(cutoffs, cutoff)
            }
    }
    return(data.frame(concordant=unlist(concordant), false_positive=unlist(false_positive),
                      false_negative=unlist(false_negative), algorithm=unlist(algorithm),
                      project=project, cutoffs=unlist(cutoffs)))
}

concordance_plot = function(concord) {
    melted = melt(concord, id=c("project", "algorithm", "cutoffs"))
    colnames(melted) = c("project", "algorithm", "cutoffs", "method", "value")
    p = ggplot(melted, aes(x=method, y=value, fill=algorithm)) +
        geom_bar(stat="identity", position="dodge") + facet_wrap(~ cutoffs) +
          theme(axis.text.x = element_text(angle=90)) +
              scale_fill_manual(values=cbPalette) + ylab("")
    ggsave(filename=concord_plot, plot=p)
}


plot_ROC(df, scores)
plot_logFC_AUC(df, scores)
ji = jaccard(df, "padj", scores)
write.table(ji, file.path(out_dir, "simulated_jaccard.tsv"),
            quote=FALSE, row.names=FALSE, sep="\t")
concord = concordance(df, scores)
write.table(concord, file.path(out_dir, "simulated_concord.tsv"),
            quote=FALSE, row.names=FALSE, sep="\t")
concordance_plot(concord)
p = ggplot(ji, aes(x=algorithm, y=jaccard)) + geom_bar(stat="identity", position="dodge")
ggsave(filename=jaccard_plot, plot=p)
